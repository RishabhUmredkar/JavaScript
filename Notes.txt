1.    Var / Let / Const
2.    null vs undefined ?
3.    what is Nan ?
4.    Symbol
5.    binInt ? Range ?
6.    Which vatiable will be hoisted in taz
7.    truthly / falsly values 


------------------------------------------------------------------------------------------------------------------------------------------------

BackUp class
Day 1 
what is JS:
      It is scripting Language. Highlevel Language. Object Oriented. 
      Object Based. Single Thread. Synchronized. Iterpretd and compiled Language

execution of JS :
      FrontEnd code will go to js engine then js engine divide js code into small parts
      and then it will go compiler then interpeter and we will get the output

For execution we want js Engine which is already present in browser. Other than that we can run JS by using NodeJs


How Many way to write the JS
1. Internal (In html we use <Script tag>)
2. External (.js File)

Declaration and Initialization
      We can declare and Initialise the variable without using datatype then it will becomoe the global variable.


Tokens : smallest part of programming Language
      types : 1. Keyword 2. Identifier 3. Operators 4. Seperators 5. Literals

Datatype : there are 8 datatype
            1.Number   2.boolean   3.String    4.Symbol     5.Null      6.Undefined       7.NAN      8.bigInt



Declaration of String
      we can declare String  
            in Single Qoutes ('')
            in Double Qoutes (" ")
            in Backticks (``)



------------------------------------------------------------------------------------------------------------------------------------------------

BackUp class

Day 2

1.    Null and Undefined
null :       When You assign the value as a null then you get the Null.
undefined :  When you dont assign any value to variable then yo get the undefined.


2.    bigInt
when you want to store the bin integer value then you have to write "n" at the end of the number.

3.    Difference between "==" and "==="
== :   It it compare only value not respective to the datatype.
=== :  It it compare value with respective to the datatype.


4.    Function
4.1   simple Function.
            syntax : function Identifier(){}

4.2   Arrow Function   (It is like the it retruns the values)
            It will return the ans implicitly. 
            We store the function in variable.
            syntax : let demo = () =>{}
            => : this is known as fat Arrow.







------------------------------------------------------------------------------------------------------------------------------------------------

BackUp class

Day 3

Lexical Scope : accessing the members outside the function.
closure : a special maemory allocation in the window Object.




------------------------------------------------------------------------------------------------------------------------------------------------

Day 2 
Variables 

variable  | Declaration | Initialization | (Declaration + Initialization) | updatation | Redeclaration + ReInitialization |     Default value        |
Var       |     YES     |   yes          |              YES               |     YES    |                YES               |       Window Object      |
Let       |     YES     |   yes          |              YES               |     YES    |                No                |   Temporarol dead zone   |
Const     |     NO      |   NO           |              YES               |     NO     |                No                |   Temporarol dead zone   |


if we dont Declare any value to the Variables then it will undefined


//By using Double Qoutes
console.log("the Sum of "+ a1+ " and "+b + " is "+(a1+b));

//By using Backticks
console.log(`the sum of ${a1} and ${b} is ${a1+b}`);

------------------------------------------------------------------------------------------------------------------------------------------------



Day 4

1.    => ---- This is called fat function / arrow Function

2.     Question : Find the number whether it is prime or not.

3.    Function Expression
      Assigning the function to value
      It is also called anonymous Function. Which does Not have any name. 
      
4.    Immediate Invoke Function
      whenever you declare the function you need to call the function.

5.    Higher Order Function
      A fucntion which will accept normal value as well as another function as an argument
      
6.    Call Back Function
      A fucntion which act as parameter to another function



------------------------------------------------------------------------------------------------------------------------------------------------



Day 5

1. Arrow Function
        let func = () => {}

2. Regualr Function
      function demo()
      {

      }


3. Function with an expression
      3.1 with arrow function
      let f = () => {}

      3.2 with regualr function
      let f2 = function(){}


4. first calss / first citizen fucntion
      let func = () => {}


5. Immediate invoke function
      ((a)=>console.log(a))(10)   ------------this function is called only once

      console.log("start");
      ((a)=>{console.log(a)})(10);
      console.log("end");

5. High order function(hof) and call by function(cbf)           
      let hof = (cbf) =>{
//      console.log(cbf);
      cbf();
      };

      let cbf = () => {
      console.log("cbf");
      };

      hof(cbf);





------------------------------------------------------------------------------------------------------------------------------------------------



Day 6

AST  : Abstract Syntax Tree




------------------------------------------------------------------------------------------------------------------------------------------------


Day 8
1. Temporarol Dead Zone - Time spent between variable Declaration and Initialization is known as Temporarol dead zone.

2. Hoisting      - Taking any object in the top
                              taking the variable in the top of execution is Hoisting.

3. this :       - It is point toward object.

When we access variable declared in "let" and "Const" it will get the value from Temporarol dead zone and it will thrown an error.
But When we access variable declared in "var" it will get the value from Window object and it will shown undefined.




------------------------------------------------------------------------------------------------------------------------------------------------


Day 9

1.    Regular Function is getting hoisted as a function.
2.    Arrow Function is getting hoisted as a variable not a function then the result will be in error.
3.    Function with Expression is getting hoisted as a variable not a function then the result will be in error.








------------------------------------------------------------------------------------------------------------------------------------------------


Day 11

** String ***

Theere are 4 way to create String
Declaration of String
      we can declare String  
            in Single Qoutes ('')
            in Double Qoutes (" ")
            in Backticks (``)
            By new Keyword let String = new String("hello);

| No. | Method                    | Syntax                        |
|-----|---------------------------|-------------------------------|
|  1  | toLowerCase()             | str.toLowerCase()             |
|  2  | toUpperCase()             | str.toUpperCase()             |
|  3  | charAt(index)             | str.charAt(index)             |
|  4  | charCodeAt(index)         | str.charCodeAt(index)         |
|  5  | startsWith("text")        | str.startsWith("text")        |
|  6  | endsWith("text")          | str.endsWith("text")          |
|  7  | padStart(length, char)    | str.padStart(length, "char")  |
|  8  | padEnd(length, char)      | str.padEnd(length, "char")    |
|  9  | indexOf("char")           | str.indexOf("char")           |
| 10  | replace("a", "b")         | str.replace("a", "b")         |
| 11  | replaceAll("a", "b")      | str.replaceAll("a", "b")      |
| 12  | replace(/pattern/g, "b")  | str.replace(/pattern/g, "b")  |
| 13  | includes("text")          | str.includes("text")          |







------------------------------------------------------------------------------------------------------------------------------------------------

Day 12 
Arrays
      We can store any type of data in an single array.




------------------------------------------------------------------------------------------------------------------------------------------------

Day 13

forEach


//ForEach Method
// The forEach() method executes a provided function once for each array element.

let coding = ["JS","HTML","CSS","React","NodeJS","ExpressJS"];
let values = coding.forEach((val)=>{
    console.log(val);
    return val;
})
// console.log(values);   It will return undefined because forEach does not return anything.

// console.log(values);   It will return undefined because forEach does not return anything.
/**
 * forEach() method is used to execute a function on each element of an array.
 * It does not return anything.
 * It is used to iterate over an array and perform some operation on each element.
 */

------------------------------------------------------------------------------------------------------------------------------------------------

Day 14

filter : IT is used to get the data and the data can be multiple.
find : I is used to get the data but guve give only one matching data.


Method Name    |        Syntax                            |              Use                     |     Does it return something      |     What it return    |     Does it modifies original array     |
1. Map()       | arr.map((val,arr)=>{})                   |       Iterate over the array element |            Yes                    |   updated Array       |               No                        |
               |                                          |       and get updated array          |                                   |                       |                                         |      
               |                                          |                                      |                                   |                       |                                         |          
2.Filter()     |let array = arr.filter((val,i,arr) =>     |       Filter an Array                |            Yes                    |      Filterd Array    |              No                         |       
               | { return "condition"})                   |                                      |                                   |                       |                                         |       
               |                                          |                                      |                                   |                       |                                         |     
3. reduce()    |let rElement = arr.reduce(acc,val,i,arr)=>|        to get single value through   |            Yes                    |     Single value      |                No                       |
               |{ return acc}                             |        complete array                |                                   |                       |                                         |
            



| 🔢 Method Name | 🧪 Syntax                                                               | 🎯 Use                                                   | 🔁 Returns Something | 📦 Return Value      | ♻️ Modifies Original Array |
|---------------|---------------------------------------------------------------------------|----------------------------------------------------------|----------------------|---------------------- -|-----------------------------|
| **map()**     | `arr.map((val, i, arr) => { return val })`                                | Creates a new array by applying a function to each item  | ✅ Yes               | 🆕 New Array          | ❌ No                      |
| **filter()**  | `arr.filter((val, i, arr) => condition)`                                  | Filters elements based on condition                      | ✅ Yes               | 🧹 Filtered Array     | ❌ No                      |
| **reduce()**  | `arr.reduce((acc, val, i, arr) => acc + val, initialValue)`               | Reduces array to a single value                          | ✅ Yes               | 🔢 Single Value       | ❌ No                      |
| **sort()**    | `arr.sort((a, b) => b - a)`                                               | Sorts array (e.g., descending order using b - a)         | ✅ Yes               | 🆕 Sorted Array       | ✅ Yes                     |
| **forEach()** | `arr.forEach((val, i, arr) => { console.log(val) })`                      | Iterates over array without returning a new array        | ❌ No                | ❌ Undefined          | ❌ No                      |
| **reverse()** | `arr.reverse()`                                                           | Reverses the array in-place                              | ✅ Yes               | 🔄 Reversed Array     | ✅ Yes                     |




// foreach
1. i of foreach --> "of" is used to get the value
2. i in foreach --> "in" is used to get the index

let foreach = [50, 20, 10, 30, 40, 60];
for (const i of foreach)
{
        console.log(i);
}



------------------------------------------------------------------------------------------------------------------------------------------------

Day 15

1.    slice syntax : arr.slice(start index, last index) 
            it will not modify the original array
                   extracting upto the last undex and the last index will not be taken into cosideration.

2.    splice syntax : arr.splice(start index, length, element that as to be replaced at the place if extractedindexes (n no f element can be replaced))

3.    let str2 = Array.from("Terminator"); we can create a array from iterable data


array methods 
1. map : it is iterate over the array.
2.filter : if the condition is satisfy then it will return expected value
3. reduce : extract the element 
4. find : 
5. sort
6. reverse 
7. forEach
8. forin
9. forof
10. push : add the element in last
11. pop : remove the element from last
12. shift : remove the element from first
13. unshift : add the element from first
14. indexOf
15. lastIndexOf 
16. at
17. slice
18. splice
19. join
20. Array.from


| 🔢 Method Name   | 🧪 Syntax                                      | 🎯 Use                                                                 | 🔁 Returns Something | 📦 Return Value         | ♻️ Modifies Original Array |
|------------------|-----------------------------------------------|------------------------------------------------------------------------|----------------------|--------------------------|-----------------------------|
| **map()**        | `arr.map((val, i, arr) => { return val })`    | Creates a new array by applying a function to each item                | ✅ Yes               | 🆕 New Array            | ❌ No                      |
| **filter()**     | `arr.filter((val, i, arr) => condition)`      | Filters elements based on a condition                                 | ✅ Yes               | 🧹 Filtered Array       | ❌ No                      |
| **reduce()**     | `arr.reduce((acc, val, i, arr) => acc + val)` | Reduces the array to a single value by applying a function             | ✅ Yes               | 🔢 Single Value         | ❌ No                      |
| **find()**       | `arr.find((val, i, arr) => condition)`        | Finds the first element that satisfies the condition                   | ✅ Yes               | 🎯 First Matching Value | ❌ No                      |
| **sort()**       | `arr.sort((a, b) => a - b)`                   | Sorts the array in ascending or descending order                       | ✅ Yes               | 🆕 Sorted Array         | ✅ Yes                     |
| **reverse()**    | `arr.reverse()`                               | Reverses the array in place                                            | ✅ Yes               | 🔄 Reversed Array       | ✅ Yes                     |
| **forEach()**    | `arr.forEach((val, i, arr) => { console.log(val) })` | Iterates over the array without returning a new array                  | ❌ No                | ❌ Undefined            | ❌ No                      |
| **push()**       | `arr.push(element)`                           | Adds one or more elements to the end of the array                      | ✅ Yes               | 🔢 New Length of Array  | ✅ Yes                     |
| **pop()**        | `arr.pop()`                                   | Removes the last element from the array                                | ✅ Yes               | 🎯 Removed Element      | ✅ Yes                     |
| **shift()**      | `arr.shift()`                                 | Removes the first element from the array                               | ✅ Yes               | 🎯 Removed Element      | ✅ Yes                     |
| **unshift()**    | `arr.unshift(element)`                        | Adds one or more elements to the beginning of the array                | ✅ Yes               | 🔢 New Length of Array  | ✅ Yes                     |
| **indexOf()**    | `arr.indexOf(element)`                        | Returns the first index of the specified element                       | ✅ Yes               | 🔢 Index or -1          | ❌ No                      |
| **lastIndexOf()**| `arr.lastIndexOf(element)`                    | Returns the last index of the specified element                        | ✅ Yes               | 🔢 Index or -1          | ❌ No                      |
| **at()**         | `arr.at(index)`                               | Returns the element at the specified index (supports negative indices) | ✅ Yes               | 🎯 Element              | ❌ No                      |
| **slice()**      | `arr.slice(start, end)`                       | Extracts a portion of the array without modifying the original array    | ✅ Yes               | 🆕 New Array            | ❌ No                      |
| **splice()**     | `arr.splice(start, deleteCount, ...items)`    | Adds/removes elements from the array                                   | ✅ Yes               | 🆕 Modified Array       | ✅ Yes                     |
| **join()**       | `arr.join(separator)`                         | Joins all elements of the array into a string                          | ✅ Yes               | 📝 String               | ❌ No                      |
| **Array.from()** | `Array.from(iterable)`                        | Creates a new array from an iterable object                            | ✅ Yes               | 🆕 New Array            | ❌ No                      |



















------------------------------------------------------------------------------------------------------------------------------------------------

Day 16
Object

let p = new Promise(() =>{})        //way to create Object

Object is an real world entity which represent property and behviour.

We can create Object inside object just like we create educatation object inside person object.

We can perfrom CRUD Operation








------------------------------------------------------------------------------------------------------------------------------------------------

Day 17

Destructuring
Extracting values from object and arrays and assigning them to variables



------------------------------------------------------------------------------------------------------------------------------------------------

Day 18


Rest and spread

LHS             RHS
(Rest)          (Spread)
...     =       ...







------------------------------------------------------------------------------------------------------------------------------------------------

Day 19
Rest and Spread 


// We add the student, StudentAdd deails in the student object And we ReInitialize the student object
// We Use Spread
 


JSON : It consume very less memory.
We can say that the keys are present in json object is in String Format.

// javascript object to json by using JSON.stringify
// jsonObj is in string format
// Now we convert jsonObj to object by using JSON.parse
// JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string






// We cannot display in console.table the Json object directly, so we need to convert it to a string first.

for Example

this is in Json format so we cannot display in Table
let jsonObj = JSON.stringify(finalRishabh);
console.log(jsonObj);


this is in javascript object format so we can display in Table
let jsonObj1 = JSON.parse(jsonObj);
console.table(jsonObj1);










------------------------------------------------------------------------------------------------------------------------------------------------

Day 20

One more Object method i.e assign
it is used in day 16 




//It is used to check if the property exists in the object or not
console.log("name" in obj); // true




way to declare object
let object1 = {}        //object Literal way
let object2 = new Object(); //Instatiating an Object using Object constructor


// Shallow copy and deep copy

Shallow copy means both the object point the same address like newObj point the same address but after copy object will point the same address 
if we made change any of the object then it will affect into another object
let copy = newObj; // shallow copy



deep copy means both the object poiint the different addresses 
if we made change any of the object then it will not affect into another object
we can achieve this by..

let a = JSON.stringify(newObj); // convert object to string
let copy = JSON.parse(a); // convert string to object


-----------------------------------------------------------------------------------------------------------------

// Season 1
vavr let const 
js engine
jit interpeter
token 
literla 
function
String is primitive mutable
non primitive is immutable
Function :  types
call stack : lifo
 
 Problemexpressionit is the time span between variable declaration arrays initialization temporallatent constituteswhat is closure closer expressionjoe Parents property accessyogiboor scoping with the process of finding the variables in weights parade scope parent function scope is part as technical scope and the found variable accessing will be done using closurethis is written statement written statementlanguage programming language you should be very very good with the written statementsthis was all about your season one season 2 season 2is an objectsmethodcoach methodincludesthe includes index of task ofsheep and sheepwithout your speakers method join method they got takena squish strings come in the concept of includes pad stars pad 3 drink start treatment includes cara Calcode at index of last index of snipesupercase 2 lower case contact like ticket length of operator they got string case of thewhich methods and methodsmake the higher notary functionsyou see what I'm net start hereopted in the key valuableremove









------------------------------------------------------------------------------------------------------------------------------------------------

Season 3

Day 21

promise it is n Object. It i s used to achieve asynchronous
sttus of promise 1. reject 2. resolve 3. pending







------------------------------------------------------------------------------------------------------------------------------------------------

Day 22


sync  and await

It is dvndced way to hndle promise

async is importnt if you wirte await in method
await is not importnt iy you write sync



promise is used to overcome the call Back hell problem



what is call Back hell?
it means complex situation where we use multiple or nested call Back function



Settimeout :  it execute only once
setIntervl : it execute multiple times

clerIntervl







------------------------------------------------------------------------------------------------------------------------------------------------

Day 23


DOM :  Document object model and it is tree like structure like html code


math : it is a mathematical operation. 

1. round(x)
2. floor(x)       // (it will always return the down value)
3. ceil(x)        // (it will always return the up value)
4. random()       // It will generate random value
5. 