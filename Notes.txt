1.    Var / Let / Const
2.    null vs undefined ?
3.    what is Nan ?
4.    Symbol
5.    binInt ? Range ?
6.    Which vatiable will be hoisted in taz
7.    truthly / falsly values 


BackUp clss
Day 1 
what is JS:
      It is scripting Language. Highlevel Language. Object Oriented. 
      Object Based. Single Thread. Synchronized. Iterpretd and compiled Language

execution of JS :
      FrontEnd code will go to js engine then js engine divide js code into small parts
      and then it will go compiler then interpeter and we will get the output

For execution we want js Engine which is already present in browser. Other than that we can run JS by using NodeJs


How Many way to write the JS
1. Internal (In html we use <Script tag>)
2. External (.js File)

Declaration and Initialization
      We can declare and Initialise the variable without using datatype then it will becomoe the global variable.


Tokens : smallest part of programming Language
      types : 1. Keyword 2. Identifier 3. Operators 4. Seperators 5. Literals

Datatype : there are 8 datatype
            1.Number   2.boolean   3.String    4.Symbol     5.Null      6.Undefined       7.NAN      8.bigInt



Declaration of String
      we can declare String  
            in Single Qoutes ('')
            in Double Qoutes (" ")
            in Backticks (``)


Day 2 
Variables 

variable  | Declaration | Initialization | (Declaration + Initialization) | updatation | Redeclaration + ReInitialization |     Default value        |
Var       |     YES     |   yes          |              YES               |     YES    |                YES               |       Window Object      |
Let       |     YES     |   yes          |              YES               |     YES    |                No                |   Temporarol dead zone   |
Const     |     NO      |   NO           |              YES               |     NO     |                No                |   Temporarol dead zone   |


if we dont Declare any value to the Variables then it will undefined


//By using Double Qoutes
console.log("the Sum of "+ a1+ " and "+b + " is "+(a1+b));

//By using Backticks
console.log(`the sum of ${a1} and ${b} is ${a1+b}`);

------------------------------------------------------------------------------------------------------------------------------------------------



Day 4

1.    => ---- This is called fat function / arrow Function

2.     Question : Find the number whether it is prime or not.

3.    Function Expression
      Assigning the function to value
      It is also called anonymous Function. Which does Not have any name. 
      
4.    Immediate Invoke Function
      whenever you declare the function you need to call the function.

5.    Higher Order Function
      A fucntion which will accept normal value as well as another function as an argument
      
6.    Call Back Function
      A fucntion which act as parameter to another function



------------------------------------------------------------------------------------------------------------------------------------------------



Day 5

1. Arrow Function
        let func = () => {}

2. Regualr Function
      function demo()
      {

      }


3. Function with an expression
      3.1 with arrow function
      let f = () => {}

      3.2 with regualr function
      let f2 = function(){}


4. first calss / first citizen fucntion
      let func = () => {}


5. Immediate invoke function
      ((a)=>console.log(a))(10)   ------------this function is called only once

      console.log("start");
      ((a)=>{console.log(a)})(10);
      console.log("end");

5. High order function(hof) and call by function(cbf)           
      let hof = (cbf) =>{
//      console.log(cbf);
      cbf();
      };

      let cbf = () => {
      console.log("cbf");
      };

      hof(cbf);





------------------------------------------------------------------------------------------------------------------------------------------------



Day 6

AST  : Abstract Syntax Tree




------------------------------------------------------------------------------------------------------------------------------------------------


Day 8
1. Temporarol Dead Zone - Time spent between variable Declaration and Initialization is known as Temporarol dead zone.

2. Hoisting      - Taking any object in the top
                              taking the variable in the top of execution is Hoisting.

3. this :       - It is point toward object.

When we access variable declared in "let" and "Const" it will get the value from Temporarol dead zone and it will thrown an error.
But When we access variable declared in "var" it will get the value from Window object and it will shown undefined.




------------------------------------------------------------------------------------------------------------------------------------------------


Day 9

1.    Regular Function is getting hoisted as a function.
2.    Arrow Function is getting hoisted as a variable not a function then the result will be in error.
3.    Function with Expression is getting hoisted as a variable not a function then the result will be in error.








------------------------------------------------------------------------------------------------------------------------------------------------


Day 11

** String ***

Theere are 4 way to create String
Declaration of String
      we can declare String  
            in Single Qoutes ('')
            in Double Qoutes (" ")
            in Backticks (``)
            By new Keyword let String = new String("hello);

| No. | Method                    | Syntax                        |
|-----|---------------------------|-------------------------------|
|  1  | toLowerCase()             | str.toLowerCase()             |
|  2  | toUpperCase()             | str.toUpperCase()             |
|  3  | charAt(index)             | str.charAt(index)             |
|  4  | charCodeAt(index)         | str.charCodeAt(index)         |
|  5  | startsWith("text")        | str.startsWith("text")        |
|  6  | endsWith("text")          | str.endsWith("text")          |
|  7  | padStart(length, char)    | str.padStart(length, "char")  |
|  8  | padEnd(length, char)      | str.padEnd(length, "char")    |
|  9  | indexOf("char")           | str.indexOf("char")           |
| 10  | replace("a", "b")         | str.replace("a", "b")         |
| 11  | replaceAll("a", "b")      | str.replaceAll("a", "b")      |
| 12  | replace(/pattern/g, "b")  | str.replace(/pattern/g, "b")  |
| 13  | includes("text")          | str.includes("text")          |

